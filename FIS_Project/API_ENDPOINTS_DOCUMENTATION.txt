# DOCUMENTACI√ìN COMPLETA DE ENDPOINTS API - SISTEMA FIS
# Fecha: Julio 29, 2025
# Sistema de Gesti√≥n de Mantenimiento de Equipos

===============================================================================
CONFIGURACI√ìN BASE
===============================================================================
BASE_URL: http://127.0.0.1:8000
ESTRUCTURA: /{app}/{endpoint}/

===============================================================================
üîê AUTENTICACI√ìN Y TOKENS JWT
===============================================================================

1. OBTENER TOKEN DE ACCESO
   URL: POST /users/token/
   Descripci√≥n: Obtiene token JWT para autenticaci√≥n
   Body (JSON):
   {
       "username": "tu_usuario",
       "password": "tu_contrase√±a"
   }
   Respuesta:
   {
       "access": "eyJ0eXAiOiJKV1QiLCJhbGc...",
       "refresh": "eyJ0eXAiOiJKV1QiLCJhbGc..."
   }
   Permisos: P√∫blico
   Nota: Token expira en 5 minutos

2. RENOVAR TOKEN
   URL: POST /users/token/refresh/
   Descripci√≥n: Renueva el token de acceso usando refresh token
   Body (JSON):
   {
       "refresh": "eyJ0eXAiOiJKV1QiLCJhbGc..."
   }
   Respuesta:
   {
       "access": "eyJ0eXAiOiJKV1QiLCJhbGc..."
   }
   Permisos: P√∫blico

===============================================================================
üë• GESTI√ìN DE USUARIOS
===============================================================================

3. LISTAR USUARIOS
   URL: GET /users/users/
   Descripci√≥n: Lista todos los usuarios del sistema
   Query Params:
   - search: Buscar por nombre, email o username
   Headers: Authorization: Bearer {token}
   Permisos: Administrador o Ingeniero

4. OBTENER USUARIO ESPEC√çFICO
   URL: GET /users/users/{id}/
   Descripci√≥n: Obtiene detalles de un usuario espec√≠fico
   Headers: Authorization: Bearer {token}
   Permisos: Administrador o Ingeniero

5. CREAR USUARIO
   URL: POST /users/users/
   Descripci√≥n: Crea un nuevo usuario
   Body (JSON):
   {
       "username": "nuevo_usuario",
       "email": "email@example.com",
       "password": "contrase√±a",
       "first_name": "Nombre",
       "last_name": "Apellido",
       "rol": "Administrador|Ingeniero|Supervisor_Cliente"
   }
   Headers: Authorization: Bearer {token}
   Permisos: Administrador o Ingeniero

6. ACTUALIZAR USUARIO
   URL: PUT /users/users/{id}/
   Descripci√≥n: Actualiza completamente un usuario
   Body (JSON): Todos los campos del usuario
   Headers: Authorization: Bearer {token}
   Permisos: Administrador o Ingeniero

7. ACTUALIZAR PARCIAL USUARIO
   URL: PATCH /users/users/{id}/
   Descripci√≥n: Actualiza parcialmente un usuario
   Body (JSON): Solo los campos a actualizar
   Headers: Authorization: Bearer {token}
   Permisos: Administrador o Ingeniero

8. ELIMINAR USUARIO
   URL: DELETE /users/users/{id}/
   Descripci√≥n: Elimina un usuario del sistema
   Headers: Authorization: Bearer {token}
   Permisos: Administrador o Ingeniero

===============================================================================
üè¢ GESTI√ìN DE CLIENTES
===============================================================================

9. LISTAR CLIENTES
   URL: GET /clients/clientes/
   Descripci√≥n: Lista todos los clientes
   Query Params:
   - search: Buscar por nombre o email
   - sede: Filtrar por ID de sede
   Headers: Authorization: Bearer {token}
   Permisos: Administrador o Ingeniero

10. OBTENER CLIENTE ESPEC√çFICO
    URL: GET /clients/clients/{id}/
    Descripci√≥n: Obtiene detalles de un cliente espec√≠fico
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

11. CREAR CLIENTE
    URL: POST /clients/clients/
    Descripci√≥n: Crea un nuevo cliente
    Body (JSON):
    {
        "name": "Nombre del Cliente",
        "email": "cliente@example.com",
        "phone": "1234567890",
        "address": "Direcci√≥n del cliente",
        "sede": id de la sede
    }
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

12. ACTUALIZAR CLIENTE
    URL: PUT /clients/clients/{id}/
    Descripci√≥n: Actualiza completamente un cliente
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

13. ACTUALIZAR PARCIAL CLIENTE
    URL: PATCH /clients/clients/{id}/
    Descripci√≥n: Actualiza parcialmente un cliente
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

14. ELIMINAR CLIENTE
    URL: DELETE /clients/clients/{id}/
    Descripci√≥n: Elimina un cliente del sistema
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

===============================================================================
üèóÔ∏è GESTI√ìN DE SEDES
===============================================================================

16. LISTAR SEDES
    URL: GET /clients/sedes/
    Descripci√≥n: Lista todas las sedes
    Query Params:
    - search: Buscar por nombre
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

17. OBTENER SEDE ESPEC√çFICA
    URL: GET /clients/sedes/{id}/
    Descripci√≥n: Obtiene detalles de una sede espec√≠fica
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

18. CREAR SEDE
    URL: POST /clients/sedes/
    Descripci√≥n: Crea una nueva sede
    Body (JSON):
    {
        "name": "Nombre de la Sede",
        "address": "Direcci√≥n de la sede"
    }
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

19. ACTUALIZAR SEDE
    URL: PUT /clients/sedes/{id}/
    Descripci√≥n: Actualiza completamente una sede
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

20. ELIMINAR SEDE
    URL: DELETE /clients/sedes/{id}/
    Descripci√≥n: Elimina una sede del sistema
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

20. MOSTRAR AREAS DE SERVICIO ASOCIADAS A ESA SEDE
    URL: GET /clients/sedes/{id}/areas_servicio/
    Descripci√≥n: Obtiene las areas de servicio de una sede espec√≠fica
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero


===============================================================================
‚öôÔ∏è GESTI√ìN DE EQUIPOS
===============================================================================

21. LISTAR √ÅREAS DE SERVICIO
    URL: GET /equipment/areas-servicio/
    Descripci√≥n: Lista todas las √°reas de servicio
    Query Params:
    - sede: Filtrar por ID de sede
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

22. CREAR √ÅREA DE SERVICIO
    URL: POST /equipment/areas-servicio/
    Descripci√≥n: Crea una nueva √°rea de servicio
    Body (JSON):
    {
        "name": "Nombre del √Årea",
        "sede": id de la sede
    }
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

23. OBTENER √ÅREA DE SERVICIO
    URL: GET /equipment/areas-servicio/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

24. ACTUALIZAR √ÅREA DE SERVICIO
    URL: PUT /equipment/areas-servicio/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

25. ELIMINAR √ÅREA DE SERVICIO
    URL: DELETE /equipment/areas-servicio/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

26. LISTAR TIPOS DE EQUIPO
    URL: GET /equipment/tipos-equipo/
    Descripci√≥n: Lista todos los tipos de equipo
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

27. CREAR TIPO DE EQUIPO
    URL: POST /equipment/tipos-equipo/
    Descripci√≥n: Crea un nuevo tipo de equipo
    Body (JSON):
    {
        "name": "Tipo de Equipo",
        "especificaciones": "Especificaciones t√©cnicas",
        "valor_unitario": "1500.00"
    }
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

28. OBTENER TIPO DE EQUIPO
    URL: GET /equipment/tipos-equipo/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

29. ACTUALIZAR TIPO DE EQUIPO
    URL: PUT /equipment/tipos-equipo/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

30. ELIMINAR TIPO DE EQUIPO
    URL: DELETE /equipment/tipos-equipo/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

31. LISTAR EQUIPOS
    URL: GET /equipment/equipos/
    Descripci√≥n: Lista todos los equipos
    Query Params:
    - estado: Filtrar por estado (Funcional, En_Mantenimiento, Fuera_de_Servicio)
    - cliente: Filtrar por ID de cliente
    - area_servicio: Filtrar por ID de √°rea de servicio
    - tipo_equipo: Filtrar por ID de tipo de equipo
    - search: Buscar por n√∫mero de serie, marca o modelo
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

32. CREAR EQUIPO
    URL: POST /equipment/equipos/
    Descripci√≥n: Crea un nuevo equipo
    Body (JSON):
    {
        "numero_serie": "EQ001",
	"estado": "Funcional"|"En Mantenimiento"|"Fuera de Servicio"
        "marca": "HP",
        "modelo": "LaserJet Pro",
        "estado": "Funcional",
        "tipo_equipo": id tipo de equipo,
        "area_servicio": ide area de servicio,
        "cliente": id cliente
    }
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

33. OBTENER EQUIPO ESPEC√çFICO
    URL: GET /equipment/equipos/{id}/
    Descripci√≥n: Obtiene detalles completos de un equipo
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

34. ACTUALIZAR EQUIPO
    URL: PUT /equipment/equipos/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

35. ELIMINAR EQUIPO
    URL: DELETE /equipment/equipos/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

36. MARCAR EQUIPO EN MANTENIMIENTO
    URL: POST /equipment/equipos/{id}/marcar_mantenimiento/
    Descripci√≥n: Cambia el estado del equipo a "En_Mantenimiento"
    Body: {} (vac√≠o)
    Respuesta: {"status": "Equipo marcado en mantenimiento"}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

37. MARCAR EQUIPO COMO ACTIVO
    URL: POST /equipment/equipos/{id}/marcar_activo/
    Descripci√≥n: Cambia el estado del equipo a "Funcional"
    Body: {} (vac√≠o)
    Respuesta: {"status": "Equipo marcado como activo"}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

38. HISTORIAL DE MANTENIMIENTOS DEL EQUIPO
    URL: GET /equipment/equipos/{id}/marcar_fuera_servicio/
    Descripci√≥n: Cambia el estado del equipo a "Fuera de Servicio"
    Body: {} (vac√≠o)
    Respuesta: {"status": "Equipo marcado como fuera de servicio"}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero


39. HISTORIAL DE MANTENIMIENTOS DEL EQUIPO
    URL: GET /equipment/equipos/{id}/historial_mantenimientos/
    Descripci√≥n: Obtiene el historial completo de mantenimientos del equipo
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

39. ESTAD√çSTICAS DE EQUIPOS
    URL: GET /equipment/equipos/estadisticas/
    Descripci√≥n: Obtiene estad√≠sticas generales de equipos
    Respuesta:
    {
        "total_equipos": 150,
        "por_estado": [...],
        "por_tipo": [...],
        "equipos_criticos": [...]
    }
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

===============================================================================
üîß GESTI√ìN DE MANTENIMIENTOS
===============================================================================

40. LISTAR MANTENIMIENTOS
    URL: GET /maintenance/mantenimientos/
    Descripci√≥n: Lista todos los mantenimientos
    Query Params:
    - estado: Filtrar por estado (Registrado, Programado, En_Ejecucion, Completado, Cancelado)
    - tipo: Filtrar por tipo (Preventivo, Correctivo, Predictivo)
    - equipo: Filtrar por ID de equipo
    - usuario: Filtrar por ID de usuario asignado
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

41. CREAR MANTENIMIENTO
    URL: POST /maintenance/mantenimientos/
    Descripci√≥n: Crea un nuevo mantenimiento
    Body (JSON):
    {
        "tipo": "Preventivo"|"Correctivo"|"Predictivo",
	"estado": "Resgistrado"|"Programado"|"En Ejecucion"|"Completado"|"Cancelado"
        "equipo": id equipo,
        "usuario": id usuario asignado
    }
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

42. OBTENER MANTENIMIENTO ESPEC√çFICO
    URL: GET /maintenance/mantenimientos/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

43. ACTUALIZAR MANTENIMIENTO
    URL: PUT /maintenance/mantenimientos/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

44. ELIMINAR MANTENIMIENTO
    URL: DELETE /maintenance/mantenimientos/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

45. PROGRAMAR MANTENIMIENTO
    URL: POST /maintenance/mantenimientos/{id}/programar/
    Descripci√≥n: Cambia el estado a "Programado"
    Body: {} (vac√≠o)
    Respuesta: {"status": "Mantenimiento programado"}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

46. INICIAR MANTENIMIENTO
    URL: POST /maintenance/mantenimientos/{id}/iniciar/
    Descripci√≥n: Cambia el estado a "En_Ejecucion" y registra fecha de inicio
    Body: {} (vac√≠o)
    Respuesta: {"status": "Mantenimiento iniciado"}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

47. FINALIZAR MANTENIMIENTO
    URL: POST /maintenance/mantenimientos/{id}/finalizar/
    Descripci√≥n: Cambia el estado a "Completado" y registra fecha de fin
    Body: {} (vac√≠o)
    Respuesta: {"status": "Mantenimiento finalizado"}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

48. CANCELAR MANTENIMIENTO
    URL: POST /maintenance/mantenimientos/{id}/cancelar/
    Descripci√≥n: Cambia el estado a "Cancelado"
    Body: {} (vac√≠o)
    Respuesta: {"status": "Mantenimiento cancelado"}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

===============================================================================
üìã GESTI√ìN DE √ìRDENES DE TRABAJO
===============================================================================

49. LISTAR √ìRDENES DE TRABAJO
    URL: GET /maintenance/ordenes-trabajo/
    Descripci√≥n: Lista todas las √≥rdenes de trabajo
    Query Params:
    - estado: Filtrar por estado
    - usuario_asignado: Filtrar por ID de usuario asignado
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

50. CREAR ORDEN DE TRABAJO
    URL: POST /maintenance/ordenes-trabajo/
    Body (JSON):
    {
	"estado": 'Generada' | 'Asignada' | 'En Curso' | 'Completada' | 'Cancelada',
	"fecha_asignacion": fecha,
	"descripcion_trabajo": "Descripci√≥n de la orden"
        "mantenimiento": id del mantenimiento,
        "usuario_asignado": id de usuario asignado a a orden, supongo que es el mismo que esta asociado al mantenimiento,
        
    }
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

51. OBTENER ORDEN DE TRABAJO
    URL: GET /maintenance/ordenes-trabajo/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

52. ACTUALIZAR ORDEN DE TRABAJO
    URL: PUT /maintenance/ordenes-trabajo/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

53. ELIMINAR ORDEN DE TRABAJO
    URL: DELETE /maintenance/ordenes-trabajo/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

54. ASIGNAR ORDEN DE TRABAJO
    URL: POST /maintenance/ordenes-trabajo/{id}/asignar/
    Body (JSON):
    {
        "usuario_id": 2
    }
    Respuesta: {"status": "Orden asignada correctamente"}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

55. INICIAR ORDEN DE TRABAJO
    URL: POST /maintenance/ordenes-trabajo/{id}/iniciar/
    Body: {} (vac√≠o)
    Respuesta: {"status": "Orden iniciada"}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

55. COMPLETAR ORDEN DE TRABAJO
    URL: POST /maintenance/ordenes-trabajo/{id}/completar/
    Body: {} (vac√≠o)
    Respuesta: {"status": "Orden completada"}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

55. CANCELAR ORDEN DE TRABAJO
    URL: POST /maintenance/ordenes-trabajo/{id}/cancelar/
    Body: {} (vac√≠o)
    Respuesta: {"status": "Orden cancelada"}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

===============================================================================
üí∞ GESTI√ìN DE COTIZACIONES
===============================================================================

56. LISTAR COTIZACIONES
    URL: GET /maintenance/cotizaciones/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

57. CREAR COTIZACI√ìN
    URL: POST /maintenance/cotizaciones/
    Body (JSON):
    {
	"estado": "Generada" | "Completa" | "Incompleta",
	"subtotal": valor,
	"impuestos": valor,
	"total": valor calculado por la funcion calcular_total,
        "mantenimiento": id mantenimiento
    }
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

58. OBTENER COTIZACI√ìN
    URL: GET /maintenance/cotizaciones/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

59. ACTUALIZAR COTIZACI√ìN
    URL: PUT /maintenance/cotizaciones/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

60. ELIMINAR COTIZACI√ìN
    URL: DELETE /maintenance/cotizaciones/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

61. CALCULAR TOTAL COTIZACI√ìN
    URL: POST /maintenance/cotizaciones/{id}/calcular_total/
    Descripci√≥n: Recalcula el total de la cotizaci√≥n
    Body: {} (vac√≠o)
    Respuesta: {'total': total}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

61. COMPLETAR COTIZACI√ìN
    URL: POST /maintenance/cotizaciones/{id}/completar/
    Descripci√≥n: Cambia el estado a completa
    Body: {} (vac√≠o)
    Respuesta: {'status': 'Cotizaci√≥n completada'}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

===============================================================================
üìä GESTI√ìN DE REPORTES DE SERVICIO
===============================================================================

62. LISTAR REPORTES DE SERVICIO
    URL: GET /maintenance/reportes-servicio/
    Query Params:
    - estado: Filtrar por estado
    - creado_por: Filtrar por ID de usuario creador
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

63. CREAR REPORTE DE SERVICIO
    URL: POST /maintenance/reportes-servicio/
    Body (JSON):
    {
	"Estado": 'No Emitido'|'Emitido'|'Revisado'|'Aprobado'|'No Aprobado'
	"contenido": "Detalles del trabajo realizado...",
	"fecha_emision": "fecha",
        "mantenimiento": 1,
        "creado_por": id del creador
    }
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

64. OBTENER REPORTE DE SERVICIO
    URL: GET /maintenance/reportes-servicio/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

65. ACTUALIZAR REPORTE DE SERVICIO
    URL: PUT /maintenance/reportes-servicio/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

66. ELIMINAR REPORTE DE SERVICIO
    URL: DELETE /maintenance/reportes-servicio/{id}/
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

67. EMITIR REPORTE DE SERVICIO
    URL: POST /maintenance/reportes-servicio/{id}/emitir/
    Descripci√≥n: Cambia el estado a "Emitido"
    Body: {} (vac√≠o)
    Respuesta: {"status": "Reporte aprobado"}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

67. APROBAR REPORTE DE SERVICIO
    URL: POST /maintenance/reportes-servicio/{id}/aprobar/
    Descripci√≥n: Cambia el estado a "Aprobado"
    Body: {} (vac√≠o)
    Respuesta: {"status": "Reporte aprobado"}
    Headers: Authorization: Bearer {token}
    Permisos: Administrador

68. REVISAR REPORTE DE SERVICIO
    URL: POST /maintenance/reportes-servicio/{id}/revisar/
    Descripci√≥n: Marca el reporte para revisi√≥n
    Body: {} (vac√≠o)
    Headers: Authorization: Bearer {token}
    Permisos: Administrador o Ingeniero

===============================================================================
C√ìDIGOS DE RESPUESTA HTTP
===============================================================================

200 OK - Operaci√≥n exitosa
201 Created - Recurso creado exitosamente
204 No Content - Operaci√≥n exitosa sin contenido (DELETE)
400 Bad Request - Datos inv√°lidos en la petici√≥n
401 Unauthorized - Token inv√°lido o expirado
403 Forbidden - Sin permisos para realizar la operaci√≥n
404 Not Found - Recurso no encontrado
405 Method Not Allowed - M√©todo HTTP no permitido
500 Internal Server Error - Error interno del servidor

===============================================================================
FORMATO DE ERRORES
===============================================================================

Formato est√°ndar de respuesta de error:
{
    "error": "Descripci√≥n del error",
    "details": "Detalles espec√≠ficos del error",
    "code": "CODIGO_ERROR"
}

===============================================================================
EJEMPLOS DE USO CORREGIDOS
===============================================================================

# JavaScript:
fetch('http://127.0.0.1:8000/users/token/', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ username: 'admin', password: 'admin123' })
});

# cURL:
curl -X POST http://127.0.0.1:8000/users/token/ \
  -H "Content-Type: application/json" \
  -d '{"username": "admin", "password": "admin123"}'

# URLs Principales:
- /users/token/ - Autenticaci√≥n
- /users/users/ - Usuarios  
- /clients/clients/ - Clientes
- /clients/sedes/ - Sedes
- /equipment/equipos/ - Equipos
- /maintenance/mantenimientos/ - Mantenimientos

===============================================================================
NOTAS IMPORTANTES
===============================================================================

1. AUTENTICACI√ìN:
   - Todos los endpoints (excepto /users/token/) requieren autenticaci√≥n JWT
   - El token debe enviarse en el header: "Authorization: Bearer {token}"
   - Los tokens expiran en 5 minutos

2. PERMISOS:
   - Administrador: Acceso completo a todas las operaciones
   - Ingeniero: Acceso de lectura y algunas operaciones de mantenimiento
   - Supervisor_Cliente: Acceso limitado (seg√∫n implementaci√≥n)

3. FILTROS Y B√öSQUEDAS:
   - Muchos endpoints soportan query parameters para filtrar
   - Use ?search= para b√∫squedas generales
   - Combine m√∫ltiples filtros con &

4. PAGINACI√ìN:
   - Los listados pueden estar paginados
   - Use ?page= y ?page_size= seg√∫n sea necesario

5. FORMATO DE FECHAS:
   - Use formato ISO 8601: "2025-07-29T10:30:00Z"
   - Las fechas se almacenan en UTC

===============================================================================
FLUJO COMPLETO DE MANTENIMIENTO
===============================================================================

1. Obtener token:
   POST /users/token/ {"username": "admin", "password": "pass"}

2. Crear cliente:
   POST /clients/clients/ {...}

3. Crear equipo:
   POST /equipment/equipos/ {...}

4. Programar mantenimiento:
   POST /maintenance/mantenimientos/ {...}

5. Iniciar mantenimiento:
   POST /maintenance/mantenimientos/1/iniciar/

6. Crear orden de trabajo:
   POST /maintenance/ordenes-trabajo/ {...}

7. Completar mantenimiento:
   POST /maintenance/mantenimientos/1/finalizar/

8. Generar reporte:
   POST /maintenance/reportes-servicio/ {...}

===============================================================================
CONTACTO Y SOPORTE
===============================================================================

Para soporte t√©cnico o consultas sobre la API:
- Documentaci√≥n: http://127.0.0.1:8000/docs/ (si est√° configurado)
- Logs del sistema: Revisar la consola del servidor Django

Fin del documento - Total de endpoints: 68
Generado: Julio 29, 2025